{
  "version": 3,
  "sources": ["../../@lexical/react/LexicalCheckListPlugin.dev.js", "../../@lexical/react/LexicalCheckListPlugin.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar list = require('@lexical/list');\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction CheckListPlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return utils.mergeRegister(editor.registerCommand(list.INSERT_CHECK_LIST_COMMAND, () => {\n      list.insertList(editor, 'check');\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => {\n      return handleArrownUpOrDown(event, editor, false);\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => {\n      return handleArrownUpOrDown(event, editor, true);\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, event => {\n      const activeItem = getActiveCheckListItem();\n\n      if (activeItem != null) {\n        const rootElement = editor.getRootElement();\n\n        if (rootElement != null) {\n          rootElement.focus();\n        }\n\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_SPACE_COMMAND, event => {\n      const activeItem = getActiveCheckListItem();\n\n      if (activeItem != null && editor.isEditable()) {\n        editor.update(() => {\n          const listItemNode = lexical.$getNearestNodeFromDOMNode(activeItem);\n\n          if (list.$isListItemNode(listItemNode)) {\n            event.preventDefault();\n            listItemNode.toggleChecked();\n          }\n        });\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => {\n      return editor.getEditorState().read(() => {\n        const selection = lexical.$getSelection();\n\n        if (lexical.$isRangeSelection(selection) && selection.isCollapsed()) {\n          const {\n            anchor\n          } = selection;\n          const isElement = anchor.type === 'element';\n\n          if (isElement || anchor.offset === 0) {\n            const anchorNode = anchor.getNode();\n            const elementNode = utils.$findMatchingParent(anchorNode, node => lexical.$isElementNode(node) && !node.isInline());\n\n            if (list.$isListItemNode(elementNode)) {\n              const parent = elementNode.getParent();\n\n              if (list.$isListNode(parent) && parent.getListType() === 'check' && (isElement || elementNode.getFirstDescendant() === anchorNode)) {\n                const domNode = editor.getElementByKey(elementNode.__key);\n\n                if (domNode != null && document.activeElement !== domNode) {\n                  domNode.focus();\n                  event.preventDefault();\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      });\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerRootListener((rootElement, prevElement) => {\n      if (rootElement !== null) {\n        rootElement.addEventListener('click', handleClick);\n        rootElement.addEventListener('pointerdown', handlePointerDown);\n      }\n\n      if (prevElement !== null) {\n        prevElement.removeEventListener('click', handleClick);\n        prevElement.removeEventListener('pointerdown', handlePointerDown);\n      }\n    }));\n  });\n  return null;\n}\n\nfunction handleCheckItemEvent(event, callback) {\n  const target = event.target;\n\n  if (target === null || !utils.isHTMLElement(target)) {\n    return;\n  } // Ignore clicks on LI that have nested lists\n\n\n  const firstChild = target.firstChild;\n\n  if (firstChild != null && utils.isHTMLElement(firstChild) && (firstChild.tagName === 'UL' || firstChild.tagName === 'OL')) {\n    return;\n  }\n\n  const parentNode = target.parentNode; // @ts-ignore internal field\n\n  if (!parentNode || parentNode.__lexicalListType !== 'check') {\n    return;\n  }\n\n  const pageX = event.pageX;\n  const rect = target.getBoundingClientRect();\n\n  if (target.dir === 'rtl' ? pageX < rect.right && pageX > rect.right - 20 : pageX > rect.left && pageX < rect.left + 20) {\n    callback();\n  }\n}\n\nfunction handleClick(event) {\n  handleCheckItemEvent(event, () => {\n    const domNode = event.target;\n    const editor = findEditor(domNode);\n\n    if (editor != null && editor.isEditable()) {\n      editor.update(() => {\n        if (event.target) {\n          const node = lexical.$getNearestNodeFromDOMNode(domNode);\n\n          if (list.$isListItemNode(node)) {\n            domNode.focus();\n            node.toggleChecked();\n          }\n        }\n      });\n    }\n  });\n}\n\nfunction handlePointerDown(event) {\n  handleCheckItemEvent(event, () => {\n    // Prevents caret moving when clicking on check mark\n    event.preventDefault();\n  });\n}\n\nfunction findEditor(target) {\n  let node = target;\n\n  while (node) {\n    // @ts-ignore internal field\n    if (node.__lexicalEditor) {\n      // @ts-ignore internal field\n      return node.__lexicalEditor;\n    }\n\n    node = node.parentNode;\n  }\n\n  return null;\n}\n\nfunction getActiveCheckListItem() {\n  const activeElement = document.activeElement;\n  return activeElement != null && activeElement.tagName === 'LI' && activeElement.parentNode != null && // @ts-ignore internal field\n  activeElement.parentNode.__lexicalListType === 'check' ? activeElement : null;\n}\n\nfunction findCheckListItemSibling(node, backward) {\n  let sibling = backward ? node.getPreviousSibling() : node.getNextSibling();\n  let parent = node; // Going up in a tree to get non-null sibling\n\n  while (sibling == null && list.$isListItemNode(parent)) {\n    // Get li -> parent ul/ol -> parent li\n    parent = parent.getParentOrThrow().getParent();\n\n    if (parent != null) {\n      sibling = backward ? parent.getPreviousSibling() : parent.getNextSibling();\n    }\n  } // Going down in a tree to get first non-nested list item\n\n\n  while (list.$isListItemNode(sibling)) {\n    const firstChild = backward ? sibling.getLastChild() : sibling.getFirstChild();\n\n    if (!list.$isListNode(firstChild)) {\n      return sibling;\n    }\n\n    sibling = backward ? firstChild.getLastChild() : firstChild.getFirstChild();\n  }\n\n  return null;\n}\n\nfunction handleArrownUpOrDown(event, editor, backward) {\n  const activeItem = getActiveCheckListItem();\n\n  if (activeItem != null) {\n    editor.update(() => {\n      const listItem = lexical.$getNearestNodeFromDOMNode(activeItem);\n\n      if (!list.$isListItemNode(listItem)) {\n        return;\n      }\n\n      const nextListItem = findCheckListItemSibling(listItem, backward);\n\n      if (nextListItem != null) {\n        nextListItem.selectStart();\n        const dom = editor.getElementByKey(nextListItem.__key);\n\n        if (dom != null) {\n          event.preventDefault();\n          setTimeout(() => {\n            dom.focus();\n          }, 0);\n        }\n      }\n    });\n  }\n\n  return false;\n}\n\nexports.CheckListPlugin = CheckListPlugin;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalCheckListPlugin = process.env.NODE_ENV === 'development' ? require('./LexicalCheckListPlugin.dev.js') : require('./LexicalCheckListPlugin.prod.js')\nmodule.exports = LexicalCheckListPlugin;"],
  "mappings": "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",
  "names": []
}
